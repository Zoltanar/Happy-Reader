<UserControl x:Class="Happy_Reader.View.Tabs.IthVnrTab"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             mc:Ignorable="d"
             xmlns:viewModel="clr-namespace:Happy_Reader.ViewModel"
             d:DataContext="{d:DesignInstance viewModel:IthViewModel}"
             Loaded="IthVnrTab_OnLoaded" d:DesignHeight="348" d:DesignWidth="593">
	<UserControl.Resources>
		<Style TargetType="ButtonBase" x:Key="ButtonBaseStyle">
			<Setter Property="Foreground" Value="White"/>
			<Setter Property="Background" Value="SaddleBrown"/>
			<Setter Property="Height" Value="17"/>
			<Setter Property="BorderThickness" Value="0"/>
			<Setter Property="Padding" Value="2,0" />
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ButtonBase}" >
						<Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" >
							<TextBlock Name="ContentPresenter" VerticalAlignment="Center" HorizontalAlignment="Center" Text="{TemplateBinding Content}"/>
						</Border>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="True">
					<Setter Property="FontWeight" Value="Bold"/>
					<Setter Property="Background" Value="SandyBrown"/>
					<Setter Property="Padding" Value="0"/>
				</Trigger>
				<Trigger Property="IsEnabled" Value="False">
					<Setter Property="Background" Value="LightGray"/>
					<Setter Property="Foreground" Value="DimGray"/>
				</Trigger>
			</Style.Triggers>
		</Style>
		<Style TargetType="ButtonBase" x:Key="GeneralButtonStyle" BasedOn="{StaticResource ButtonBaseStyle}">
			<Setter Property="FontWeight" Value="Bold"/>
		</Style>
		<Style TargetType="ToggleButton" x:Key="GeneralToggleStyle" BasedOn="{StaticResource GeneralButtonStyle}">
			<Setter Property="BorderBrush" Value="Black"/>
			<Setter Property="BorderThickness" Value="1.5"/>
			<Style.Triggers>
				<Trigger Property="IsChecked" Value="True">
					<Setter Property="Background" Value="DarkRed"/>
				</Trigger>
				<MultiTrigger>
					<MultiTrigger.Conditions>
						<Condition Property="IsMouseOver" Value="True"/>
						<Condition Property="IsChecked" Value="True"/>
					</MultiTrigger.Conditions>
					<MultiTrigger.Setters>
						<Setter Property="Background" Value="PaleVioletRed"/>
					</MultiTrigger.Setters>
				</MultiTrigger>
			</Style.Triggers>
		</Style>
		<Style TargetType="Button" BasedOn="{StaticResource ButtonBaseStyle}"/>
	</UserControl.Resources>
	<Grid Background="Bisque">
		<Grid.RowDefinitions>
			<RowDefinition Height="Auto"/>
			<RowDefinition Height="Auto"/>
			<RowDefinition Height="*"/>
		</Grid.RowDefinitions>
		<!-- row 0 -->
		<UniformGrid Columns="4" Grid.Row="0" Height="100">
			<Button Margin="2" Content="Show Output Window" Style="{StaticResource GeneralButtonStyle}" Click="ShowOutputWindow"/>
			<Button Margin="2" Content="Reset Output Window" Style="{StaticResource GeneralButtonStyle}" Click="ResetOutputWindow"/>
			<ToggleButton Margin="2" Content="Merge By Hook Code" Style="{StaticResource GeneralToggleStyle}" IsChecked="{Binding MergeByHookCode}"/>
			<ToggleButton Margin="2" Content="Global Pause" Style="{StaticResource GeneralToggleStyle}" IsChecked="{Binding Paused}" />
			<ToggleButton Margin="2" Content="Show Latest Thread" Style="{StaticResource GeneralToggleStyle}" IsChecked="{Binding HookManager.ShowLatestThread}" />
			<ToggleButton Margin="2" Content="Ignore Other Threads" Style="{StaticResource GeneralToggleStyle}" IsChecked="{Binding HookManager.IgnoreOtherThreads}" />
			<Button Margin="2" Content="Attach To Process" Style="{StaticResource GeneralButtonStyle}" Click="OpenProcessExplorer"/>
			<Button Margin="2" Content="Toggle Display Others"    Command="{Binding ToggleDisplayOthersCommand}" />
			<Button Margin="2" Content="Toggle Post Others" Command="{Binding TogglePostOthersCommand}"/>
			<Button Margin="2" Content="Toggle Pause Others"      Command="{Binding TogglePauseOthersCommand}" />
			<Button Margin="2" Content="Clear Others"      Command="{Binding ClearOtherThreadsCommand}"/>
			<ToggleButton Margin="2" Name="DeleteSavedThreadsButton" Click="DeleteSavedThreads" ToolTip="Deletes saved options for text threads previously encountered." Content="Delete Saved Threads" Style="{StaticResource GeneralToggleStyle}"/>
		</UniformGrid>
		<Popup Grid.Row="0" x:Name="DeletedSavedThreadsPopup" PlacementTarget="{Binding ElementName=DeleteSavedThreadsButton}">
			<Border>
				<StackPanel>
					<Button Content="Delete for Game" Click="DeleteSavedThreadsForGame" IsEnabled="{Binding UserGameInitialized}"/>
					<Button Content="Delete All"  Click="DeleteAllSavedThreads"/>
				</StackPanel>
			</Border>
			<Popup.Style>
				<Style TargetType="{x:Type Popup}">
					<Setter Property="StaysOpen" Value="False" />
					<EventSetter Event="Button.Click" Handler="ClosePopupOnClick" />
				</Style>
			</Popup.Style>
		</Popup>
		<!-- row 1 -->
		<ComboBox Grid.Row="1" Margin="5,5,0,5" x:Name="ProcessComboBox" ItemsSource="{Binding DisplayProcesses}" SelectedItem="{Binding SelectedProcess, Mode=TwoWay}"  HorizontalAlignment="Left"  Width="120">
			<ComboBox.ItemContainerStyle>
				<Style TargetType="{x:Type ComboBoxItem}">
					<Setter Property="HorizontalContentAlignment" Value="Left"/>
					<Setter Property="VerticalContentAlignment" Value="Center"/>
				</Style>
			</ComboBox.ItemContainerStyle>
		</ComboBox>
		<TextBox  Grid.Row="1" Margin="130,5,5,5" TextWrapping="Wrap" Text="Enter command here..." KeyUp="EnterCommand"/>
		<!--row 2 -->
		<ListBox x:Name="ThreadSelector" ItemsSource="{Binding DisplayThreads}" Margin="5" Grid.Row="2"
		         ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.VerticalScrollBarVisibility="Auto" 
						 ScrollViewer.CanContentScroll="False"
		         Background="{Binding MainTextBoxBackground}">
			<ListBox.ItemContainerStyle>
				<Style TargetType="{x:Type ListBoxItem}">
					<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
					<Setter Property="VerticalContentAlignment" Value="Top"/>
				</Style>
			</ListBox.ItemContainerStyle>
		</ListBox>
	</Grid>
</UserControl>